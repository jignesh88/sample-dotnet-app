# PowerShell script to publish performance metrics to GitHub

param (
    [Parameter(Mandatory=$true)]
    [string]$GitHubToken,
    
    [Parameter(Mandatory=$true)]
    [string]$RepositoryOwner,
    
    [Parameter(Mandatory=$true)]
    [string]$RepositoryName,
    
    [Parameter(Mandatory=$true)]
    [int]$IssueNumber,
    
    [string]$MetricsPath = "../../artifacts/metrics",
    
    [string]$TestId = $null,
    
    [switch]$IncludeCharts = $true
)

# If TestId is not provided, use the most recent metrics
if (-not $TestId) {
    $summaryFiles = Get-ChildItem -Path $MetricsPath -Filter "summary_*.md" | Sort-Object LastWriteTime -Descending
    if ($summaryFiles.Count -eq 0) {
        Write-Error "No metrics found in $MetricsPath"
        exit 1
    }
    
    $TestId = $summaryFiles[0].Name -replace "summary_", "" -replace ".md", ""
    Write-Host "Using most recent test ID: $TestId"
}

# Define paths to metrics files
$summaryPath = Join-Path -Path $MetricsPath -ChildPath "summary_$TestId.md"
$cpuMetricsPath = Join-Path -Path $MetricsPath -ChildPath "cpu_metrics_$TestId.csv"
$memoryMetricsPath = Join-Path -Path $MetricsPath -ChildPath "memory_metrics_$TestId.csv"

# Check if files exist
if (-not (Test-Path -Path $summaryPath)) {
    Write-Error "Summary file not found: $summaryPath"
    exit 1
}
if (-not (Test-Path -Path $cpuMetricsPath)) {
    Write-Error "CPU metrics file not found: $cpuMetricsPath"
    exit 1
}
if (-not (Test-Path -Path $memoryMetricsPath)) {
    Write-Error "Memory metrics file not found: $memoryMetricsPath"
    exit 1
}

# Read summary report
$summaryContent = Get-Content -Path $summaryPath -Raw

# Function to create a Mermaid chart from CSV data
function Create-MermaidChart {
    param (
        [string]$CsvPath,
        [string]$Title,
        [string]$YAxisLabel,
        [string]$DataColumn
    )
    
    $data = Import-Csv -Path $CsvPath
    
    # Format timestamps for x-axis
    $timestamps = $data | ForEach-Object { 
        $timestamp = [datetime]::Parse($_.Timestamp)
        $timestamp.ToString("HH:mm:ss")
    }
    
    # Get values for y-axis
    $values = $data | ForEach-Object { $_.$DataColumn }
    
    # Create Mermaid chart
    $chart = @"
```mermaid
xychart-beta
    title "$Title"
    x-axis "$($timestamps -join '" "')"
    y-axis "$YAxisLabel"
    line "$DataColumn" $($values -join " ")
```
"@
    
    return $chart
}

# Create charts if requested
$chartsContent = ""
if ($IncludeCharts) {
    $cpuChart = Create-MermaidChart -CsvPath $cpuMetricsPath -Title "CPU Utilization" -YAxisLabel "Percentage (%)" -DataColumn "CPUUtilization"
    $memoryChart = Create-MermaidChart -CsvPath $memoryMetricsPath -Title "Memory Utilization" -YAxisLabel "Percentage (%)" -DataColumn "MemoryUtilization"
    
    $chartsContent = @"

## Performance Charts

### CPU Utilization
$cpuChart

### Memory Utilization
$memoryChart
"@
}

# Combine summary and charts
$commentBody = @"
# Performance Test Results

$summaryContent

$chartsContent

---
*This comment was automatically generated by the CI/CD pipeline.*
"@

# Create GitHub API request
$apiUrl = "https://api.github.com/repos/$RepositoryOwner/$RepositoryName/issues/$IssueNumber/comments"
$headers = @{
    "Authorization" = "token $GitHubToken"
    "Accept" = "application/vnd.github.v3+json"
    "Content-Type" = "application/json"
}
$body = @{
    "body" = $commentBody
} | ConvertTo-Json

# Post comment to GitHub
Write-Host "Posting metrics to GitHub issue #$IssueNumber..."
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body
    Write-Host "Successfully posted metrics to GitHub issue #$IssueNumber"
    Write-Host "Comment URL: $($response.html_url)"
} catch {
    Write-Error "Failed to post metrics to GitHub: $_"
    exit 1
}
